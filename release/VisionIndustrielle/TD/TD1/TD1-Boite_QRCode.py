# %% [markdown]
# ### Pr√©requis : Utilisation d'un notebook Jupyter (fichiers de type *.ipynb)
# Les notebooks Jupyter sont des cahiers √©lectroniques permettant dans un m√™me document l'utilisation de cellules de textes, de cellules de codes (souvent en langage de programmation Python), et des cellules pour l‚Äôaffichage des r√©sultats des cellules de codes.  
# Un notebook s'organise g√©n√©ralement de la mani√®re suivante :  
# 
# > *Une cellule de texte*  
# > La mise en forme du texte est possible en utilisant la syntaxe Markdown : <https://www.markdownguide.org/basic-syntax/>
# 
# >   *Une cellule de code*
# >   ```python
# >   dim1_box_cm = 40        # longueur 40 cm
# >   print("Longueur de la boite (en cm) :", dim1_box_cm)
# >   ```
# 
# >   *Une cellule de r√©sultats des codes ex√©cut√©s - cette cellule est non √©ditable et auto g√©n√©r√©e par l‚Äôex√©cution du code de la cellule pr√©c√©dente*  
# >   Longueur de la boite (en cm) : 40
# 
# 
# Pour plus d'information voir : <https://code.visualstudio.com/docs/datascience/jupyter-notebooks>
# 

# %% [markdown]
# # TD 1 : Cam√©ra lin√©aire pour la d√©tection de QR Codes sur des bo√Ætes.
# 
# √ânonc√© du TD : [TD1-Boite_QRCODE.pdf](TD1-Boite_QRCODE.pdf)
# 
# R√©sum√© :  
# Un industriel fait appel √† vos talents en vision industrielle pour moderniser son entreprise. Il vous invite √† venir visiter sa cha√Æne de production. Il vous pr√©sente un poste de travail o√π des bo√Ætes en carton √©quip√©es de QR code sont scann√©es manuellement par un op√©rateur. L'industriel vous demande s'il est possible d'utiliser une cam√©ra lin√©aire sur le tapis roulant convoyant les cartons pour automatiser le scan des QR Codes. 
# 
# Apr√®s discussion avec l'ing√©nieur de production, voici les informations obtenues pour identifier les √©l√©ments n√©cessaires √† l'identification d'une cam√©ra lin√©aire r√©pondant au besoin  :  
# (Les informations obtenues sur le syst√®me sont les r√©ponses de la question B de [TD1-Boite_QRCODE.pdf](TD1-Boite_QRCODE.pdf))
# 
# 1. Information sur les bo√Ætes √† scanner:
#     - boite de dimensions : 40x30 cm¬≤.  
#     - les boites avancent sur le tapis roulant suivant la longueur de 40cm.  
#     - la distance entre deux bo√Ætes sur le tapis est de 5cm.  
# >
# 2. Information sur le QR CODE:  
#     - le QR CODE V2 a une dimension de 2x2 cm¬≤.  
#     - la grille d'encodage du QR CODE est de 25x25 √©l√©ments.  
# >
# 3. Information de production:  
#     - la cadence de production est de 35 boites pour une minute.
#     - La cam√©ra lin√©aire scanne ligne par ligne la boite dans sa largeur de 30cm.
#     - la bo√Æte se d√©place dans le sens de sa longueur (40cm) sous la cam√©ra. 
# 

# %%
#Information sur les bo√Ætes:
dim1_box_cm = 40        # longueur 40 cm
dim2_box_cm = 30        # largeur 30 cm
box_gap_cm = 5          # distance entre les boites 5 cm

#QR code info
dim_qr_code_cm = 2      # taille du qrcode 4x4 cm¬≤
qr_code_grid = 25       # grille 25x25

#Cadence
cadence_box = 35       # unit√©
cadence_sec = 60       # en second

# %% [markdown]
# **Question 1** :  Calculer la taille du plus petit √©l√©ment √† observer

# %%
min_size_to_detect  = dim_qr_code_cm / qr_code_grid 
print("Taille du plus petit objet (cm):", min_size_to_detect)

# %% [markdown]
# **Question 2** : Calculer la vitesse n√©cessaire (en cm/s puis km/h) de d√©filement des bo√Ætes pour respecter la cadence.

# %%
box_speed = (dim1_box_cm + box_gap_cm) * cadence_box / cadence_sec     
print("Vitesse de la boite (cm/s)", box_speed)

# Facteur de conversion cm/s en km/h 
cms_to_kmh_factor = 3600/100000     # 3600sec dans 1h, 100000cm dans 1km (attention de ne pas se tromper, calcul parfois compliqu√© !üòâ)                                        
print("Facteur de conversion cm/s vers km/h : ", cms_to_kmh_factor)
print("Vitesse de la boite (km/h)", box_speed * cms_to_kmh_factor)

# %% [markdown]
# **Question 3** : Quel est le nombre minimal de pixels N que doit contenir le capteur lin√©aire quand le coefficient C de s√©curit√© est fix√© √† 2 (pour respecter le th√©or√®me de Shannon) ?

# %%
coef_C = 2 # coefficient C de s√©curit√©

# Premi√®re fa√ßon de voir les choses en suivant la formule du cours sur la pr√©cision :
precision = min_size_to_detect / coef_C     # on calcul la pr√©cision souhait√©e => la plus petite distance divis√©e par le coefficient de s√©curit√©.
pixels = int(dim2_box_cm / precision)       # nombre de pixels (r√©solution du capteur) = dimension de l'objet √† inspecter diviser par la pr√©cision
print("Nombre de pixels pour le capteur (v1): ", pixels)

# Deuxi√®me fa√ßon de voir les choses (et donnant le m√™me r√©sultat) :           
pixels_v2 = int(dim2_box_cm / min_size_to_detect)  # le nombre de pixels = dimension de l'objet √† inspecter diviser par la dimension du plus petit object √† observer
pixels_v2 = pixels_v2 * coef_C                     # on multiplie ce nombre de pixels par le coefficient de s√©curit√©.
print("Nombre de pixels pour le capteur (v2): ", pixels_v2)

# %% [markdown]
# **Question 4** : Combien de lignes (ou images) sont n√©cessaires pour scanner une boite.

# %%
# calcul similaire √† la question 3 sur la longueur de la boite.
line_scan_count = (dim1_box_cm / min_size_to_detect)  # largueur diviser par le plus petit √©l√©ment
line_scan_count = int(line_scan_count * coef_C)  # on multiplie ce nombre par le facteur de s√©curit√©
print("Nombre de lignes n√©cessaires au scan d'une boite (en tenant compte du facteur de s√©curit√©) :", line_scan_count)

# %% [markdown]
# **Question 5** : Combien de temps faut-il pour scanner une boite compl√®te ?

# %%
# formule:  vitesse = distance / temps -> temps = distance / vitesse
time_to_scan_one_box = dim1_box_cm / box_speed
print("Temps pour scanner une boite (sec) :", time_to_scan_one_box)

# %% [markdown]
# **Question 6** : Quelle est la fr√©quence F d‚Äôacquisition des images lignes (le FPS ‚Äì Frames per second) ?
# 

# %%
from math import ceil
fps = line_scan_count / time_to_scan_one_box
print("Images par seconde :", fps)   
print("Images par seconde (valeur arrondie au sup√©rieur) :", ceil(fps))   # fonction ceil pour arrondir la valeur au sup√©rieur

# %% [markdown]
# **Question 7** : Sachant que le transfert de l‚Äôimage d‚Äôune ligne vers le syst√®me de calcul prend 0.0005 s, quel est le temps maximal d‚Äôint√©gration possible pour la cam√©ra ?

# %%
time_to_scan_one_line = time_to_scan_one_box / line_scan_count # ou 1 / fps
print("Le temps pour scanner une ligne (sec) :", time_to_scan_one_line, "(ou 1/fps :", 1/fps,")")
image_transfert_time_sec = 0.0005               
max_integration_time = time_to_scan_one_line - image_transfert_time_sec
print("Le temps d'int√©gration ne doit pas d√©passer (seconde): ", max_integration_time)
print("Le temps d'int√©gration ne doit pas d√©passer (milliseconde): ", max_integration_time * 1000)

# %% [markdown]
# **Question 8** : Une fois la bo√Æte enti√®rement scann√©e, le traitement d‚Äôimage pour d√©tecter et lire le QR Code prend 0.20 s. V√©rifiez si ce temps de calcul est suffisant pour suivre la cadence de production.

# %%
 # Le calcul doit √™tre plus rapide que le temps √©coul√© entre deux bo√Ætes
time_between_box = box_gap_cm / box_speed          
print("Temps √©coul√© entre deux boites :", time_between_box)
if time_between_box > 0.20:
    print("Le temps √©coul√© entre deux boites est plus long que le temps de calcul. Tout est OK ! üòäüëç")
else:
    print("Le temps √©coul√© entre deux bo√Ætes est trop court pour faire le calcul - üòí‚ùå")

# %% [markdown]
# **Question 9** : Proposer des solutions. R√©viser les calculs pr√©c√©dents si besoin en fonction des solutions propos√©es.

# %% [markdown]
# Solutions envisageables:  
# 1. On peut tourner les bo√Ætes de 90¬∞ pour gagner du temps en ne scannant dans le temps plus que 30cm au lieu de 40cm.  
# Il faudra n√©anmoins un capteur lin√©aire avec plus de pixel pour l'acquisition d'une ligne de 40cm.
# Pour v√©rifier facilement les r√©sultats dans cette configuration, inverser les valeurs des variables *dim1_box_cm* et *dim2_box_cm* dans la premi√®re cellule de code.  
# ```dim1_box_cm = 30```        
# ```dim2_box_cm = 40```  
# Puis, r√©-executer l'ensemble des cellules de codes en cliquant sur ```>> Ex√©cuter Tout``` (en haut de votre Notebook).
# Vous devez obtenir √† la question 8:  
# ```Le temps √©coul√© entre deux boites est plus long que le temps de calcul. Tout est OK ! üòäüëç```
# 
# 
# 2. On peut poser le QR Code toujours au m√™me endroit sur la bo√Æte.  
# Le temps restant pour le calcul est alors le temps √©coul√© entre 2 QR Code.  
# Soit le temps pour parcourir la distance suivante :  
# ```l'espace entre 2 boites (5cm) + la longueur d'une boite (40cm) - la taille du QR Code (2cm)```.
# 
# 3. Utiliser une cam√©ra matricielle qui se d'√©clanche (√† l'aide capteur/trigger) lorsque la cam√©ra est positionn√©e au milieu de la bo√Æte.
# Soit le temps pour parcourir la distance suivante :  
# ```l'espace entre 2 boites (5cm) + la longueur d'une boite (40cm)```.
# 
# Un sch√©ma peut aider √† visualiser ces diff√©rentes solutions.


